// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';
import { toast } from '@/hooks/use-toast';

const SUPABASE_URL = "https://xyfwsmblaayznplurmfa.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Inh5ZndzbWJsYWF5em5wbHVybWZhIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDA4NjQ5MzAsImV4cCI6MjA1NjQ0MDkzMH0.iSMjuUMOEGVP-eU7p1xng_XlSc3pNg_DbViVwyD3Fc8";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

// Create the Supabase client with auto-refresh for JWT tokens
export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    autoRefreshToken: true,
    persistSession: true,
    detectSessionInUrl: true
  },
  global: {
    // Add additional retries on fetch errors
    fetch: (url, options) => {
      return fetch(url, {
        ...options,
        credentials: 'include', // Include cookies for cross-origin requests
        mode: 'cors', // Enable CORS
        headers: {
          ...options?.headers,
        },
      }).catch(err => {
        console.error('Fetch error in Supabase client:', err);
        // Re-throw to allow Supabase's built-in retry logic to work
        throw err;
      });
    }
  }
});

// ðŸ”„ always keep an anonymous / refreshed JWT
supabase.auth.onAuthStateChange((_evt, session) => {
  if (!session) {
    console.log('No session found, reauthenticating...');
    supabase.auth.reauthenticate()
      .then(() => console.log('Reauthentication successful'))
      .catch(err => console.error('Reauthentication failed:', err));
  } else {
    console.log('Auth state changed, session expires:', new Date(session.expires_at! * 1000).toLocaleString());
  }
});

// Add debugging for connection issues
const checkConnection = async () => {
  try {
    const { error } = await supabase.from('prompts').select('id').limit(1);
    if (error) {
      console.error('Supabase connection check failed:', error);
      
      // Show user-friendly toast notification about connection issues
      toast({
        title: "Connection Error",
        description: "We're having trouble connecting to our services. Please check your internet connection.",
        variant: "destructive",
      });
    } else {
      console.log('Supabase connection established successfully');
    }
  } catch (err) {
    console.error('Supabase connection check exception:', err);
  }
};

// Run connection check when the app starts
checkConnection();

// Export a function to manually refresh the connection
export const refreshSupabaseConnection = async () => {
  try {
    console.log('Manually refreshing Supabase connection...');
    const { data: sessionData } = await supabase.auth.getSession();
    
    if (!sessionData?.session) {
      console.log('No active session, reauthenticating...');
      await supabase.auth.reauthenticate();
    } else {
      console.log('Session is active, refreshing token...');
      await supabase.auth.refreshSession();
    }
    
    return true;
  } catch (err) {
    console.error('Failed to refresh Supabase connection:', err);
    return false;
  }
};
